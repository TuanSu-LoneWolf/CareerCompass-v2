import os
from flask import Flask, request, jsonify
from flask_cors import CORS
import google.generativeai as genai
import json

app = Flask(__name__)
CORS(app)

# C·∫•u h√¨nh API Key
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    print("‚ö†Ô∏è  C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY")
    
genai.configure(api_key=GEMINI_API_KEY)

def get_ai_suggestion(mbti, riasec):
    """H√†m g·ªçi AI v·ªõi model gemini-2.0-flash ƒë·ªÉ l·∫•y ƒë·ªÅ xu·∫•t ngh·ªÅ nghi·ªáp"""
    try:
        prompt = f"""
        B·∫°n l√† chuy√™n gia h∆∞·ªõng nghi·ªáp. H√£y ph√¢n t√≠ch t√≠nh c√°ch MBTI v√† xu h∆∞·ªõng RIASEC ƒë·ªÉ ƒë·ªÅ xu·∫•t 5 ng√†nh ngh·ªÅ ph√π h·ª£p nh·∫•t.

        TH√îNG TIN C√Å NH√ÇN:
        - MBTI: {mbti.get('code')} - {mbti.get('name')}
        - M√¥ t·∫£ MBTI: {mbti.get('overview', '')}
        - RIASEC: {riasec.get('code')} 
        - M√¥ t·∫£ RIASEC: {riasec.get('description', '')}

        Y√äU C·∫¶U:
        1. Ph√¢n t√≠ch ng·∫Øn g·ªçn s·ª± k·∫øt h·ª£p gi·ªØa MBTI {mbti.get('code')} v√† RIASEC {riasec.get('code')}
        2. ƒê·ªÅ xu·∫•t 5 ng√†nh ngh·ªÅ c·ª• th·ªÉ, th·ª±c t·∫ø t·∫°i Vi·ªát Nam
        3. M·ªói ng√†nh ngh·ªÅ c·∫ßn c√≥ m√¥ t·∫£ ng·∫Øn v·ªÅ l√Ω do ph√π h·ª£p
        4. T·ªïng quan v·ªÅ ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp

        ƒê·ªäNH D·∫†NG OUTPUT (JSON):
        {{
            "career_path": [
                "T√™n ng√†nh 1 - M√¥ t·∫£ ng·∫Øn l√Ω do ph√π h·ª£p",
                "T√™n ng√†nh 2 - M√¥ t·∫£ ng·∫Øn l√Ω do ph√π h·ª£p", 
                "T√™n ng√†nh 3 - M√¥ t·∫£ ng·∫Øn l√Ω do ph√π h·ª£p",
                "T√™n ng√†nh 4 - M√¥ t·∫£ ng·∫Øn l√Ω do ph√π h·ª£p",
                "T√™n ng√†nh 5 - M√¥ t·∫£ ng·∫Øn l√Ω do ph√π h·ª£p"
            ],
            "summary": "Ph√¢n t√≠ch t·ªïng quan v·ªÅ ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp ph√π h·ª£p"
        }}

        L∆∞u √Ω: Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m b·∫•t k·ª≥ text n√†o kh√°c.
        """
        
        print("ü§ñ ƒêang g·ªçi Gemini 1.5 Pro...")
        
        # S·ª≠ d·ª•ng model gemini-2.0-flash
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(prompt)
        
        ai_text = response.text.strip()
        print("üìÑ Ph·∫£n h·ªìi t·ª´ AI:", ai_text[:500] + "..." if len(ai_text) > 500 else ai_text)
        
        # L√†m s·∫°ch response - lo·∫°i b·ªè markdown code blocks
        cleaned_text = ai_text
        if '```json' in cleaned_text:
            cleaned_text = cleaned_text.split('```json')[1].split('```')[0].strip()
        elif '```' in cleaned_text:
            cleaned_text = cleaned_text.split('```')[1].split('```')[0].strip()
        
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p c√≥ text th·ª´a tr∆∞·ªõc/sau JSON
        start_idx = cleaned_text.find('{')
        end_idx = cleaned_text.rfind('}') + 1
        if start_idx != -1 and end_idx != -1:
            cleaned_text = cleaned_text[start_idx:end_idx]
            
        return json.loads(cleaned_text)
        
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ªçi AI: {e}")
        raise e

@app.route("/api/ai-career", methods=["POST"])
def ai_career():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
            
        mbti = data.get("mbti", {})
        riasec = data.get("riasec", {})

        print("üì© Nh·∫≠n MBTI:", mbti.get('code', 'Unknown'))
        print("üì© Nh·∫≠n RIASEC:", riasec.get('code', 'Unknown'))

        if not mbti or not riasec:
            return jsonify({"status": "error", "message": "Missing MBTI or RIASEC data"}), 400

        # G·ªçi AI ƒë·ªÉ l·∫•y ƒë·ªÅ xu·∫•t
        suggestion = get_ai_suggestion(mbti, riasec)

        return jsonify({
            "status": "success",
            "suggestion": suggestion
        })

    except json.JSONDecodeError as e:
        print("‚ùå L·ªói parse JSON t·ª´ AI:", e)
        # Fallback v·ªõi ph√¢n t√≠ch chi ti·∫øt
        fallback = generate_detailed_fallback(mbti, riasec)
        return jsonify({
            "status": "success", 
            "suggestion": fallback
        })
        
    except Exception as e:
        print("‚ùå L·ªói x·ª≠ l√Ω:", e)
        # Fallback v·ªõi ph√¢n t√≠ch chi ti·∫øt
        fallback = generate_detailed_fallback(mbti, riasec)
        return jsonify({
            "status": "success",
            "suggestion": fallback
        })

def generate_detailed_fallback(mbti, riasec):
    """T·∫°o ƒë·ªÅ xu·∫•t fallback chi ti·∫øt d·ª±a tr√™n MBTI v√† RIASEC"""
    mbti_code = mbti.get('code', '')
    riasec_code = riasec.get('code', '')
    
    # Ph√¢n t√≠ch chi ti·∫øt theo MBTI v√† RIASEC
    analysis = analyze_personality(mbti_code, riasec_code)
    
    return {
        "career_path": analysis["careers"],
        "summary": analysis["summary"]
    }

def analyze_personality(mbti, riasec):
    """Ph√¢n t√≠ch t√≠nh c√°ch v√† ƒë·ªÅ xu·∫•t ngh·ªÅ nghi·ªáp chi ti·∫øt"""
    
    # M√¥ t·∫£ c√°c nh√≥m RIASEC
    riasec_descriptions = {
        "R": "Th·ª±c t·∫ø - th√≠ch l√†m vi·ªác v·ªõi c√¥ng c·ª•, m√°y m√≥c, v·∫≠t li·ªáu",
        "I": "Nghi√™n c·ª©u - th√≠ch quan s√°t, h·ªçc h·ªèi, ƒëi·ªÅu tra, ph√¢n t√≠ch", 
        "A": "Ngh·ªá thu·∫≠t - th√≠ch s√°ng t·∫°o, t·ª± do bi·ªÉu ƒë·∫°t √Ω t∆∞·ªüng",
        "S": "X√£ h·ªôi - th√≠ch gi·∫£ng d·∫°y, gi√∫p ƒë·ª°, ch·ªØa tr·ªã, ph·ª•c v·ª•",
        "E": "Qu·∫£n l√Ω - th√≠ch thuy·∫øt ph·ª•c, l√£nh ƒë·∫°o, qu·∫£n l√Ω, kinh doanh",
        "C": "C√¥ng ch·ª©c - th√≠ch l√†m vi·ªác v·ªõi d·ªØ li·ªáu, vƒÉn ph√≤ng, h·ªá th·ªëng"
    }
    
    # ƒê·ªÅ xu·∫•t ngh·ªÅ nghi·ªáp theo t·ª´ng combination
    career_suggestions = {
        "ISTP_R": [
            "K·ªπ s∆∞ c∆° kh√≠ - Ph√π h·ª£p v·ªõi t∆∞ duy logic v√† k·ªπ nƒÉng th·ª±c h√†nh",
            "K·ªπ thu·∫≠t vi√™n √¥ t√¥ - Gi·ªèi gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t ph·ª©c t·∫°p",
            "L·∫≠p tr√¨nh vi√™n h·ªá th·ªëng - T∆∞ duy ph√¢n t√≠ch v√† y√™u th√≠ch c√¥ng ngh·ªá",
            "K·ªπ s∆∞ x√¢y d·ª±ng - Kh·∫£ nƒÉng qu·∫£n l√Ω d·ª± √°n v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ th·ª±c t·∫ø",
            "Chuy√™n gia an ninh m·∫°ng - Ph√¢n t√≠ch r·ªßi ro v√† b·∫£o m·∫≠t h·ªá th·ªëng"
        ],
        "ISTP_I": [
            "Nh√† nghi√™n c·ª©u khoa h·ªçc - T∆∞ duy ph√¢n t√≠ch v√† y√™u th√≠ch kh√°m ph√°",
            "K·ªπ s∆∞ ph·∫ßn m·ªÅm - Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ logic v√† s√°ng t·∫°o",
            "K·ªπ thu·∫≠t vi√™n ph√≤ng th√≠ nghi·ªám - T·ªâ m·ªâ v√† ch√≠nh x√°c trong c√¥ng vi·ªác",
            "Chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu - Kh·∫£ nƒÉng x·ª≠ l√Ω th√¥ng tin ph·ª©c t·∫°p",
            "K·ªπ s∆∞ ƒëi·ªán t·ª≠ - Y√™u th√≠ch c√¥ng ngh·ªá v√† k·ªπ thu·∫≠t"
        ],
        "ISTP_A": [
            "Thi·∫øt k·∫ø c√¥ng nghi·ªáp - K·∫øt h·ª£p s√°ng t·∫°o v√† k·ªπ thu·∫≠t",
            "Nhi·∫øp ·∫£nh gia k·ªπ thu·∫≠t - ƒêam m√™ c√¥ng ngh·ªá v√† ngh·ªá thu·∫≠t",
            "Bi√™n t·∫≠p video - K·ªπ nƒÉng k·ªπ thu·∫≠t v√† c·∫£m quan ngh·ªá thu·∫≠t",
            "Nh√† thi·∫øt k·∫ø game - S√°ng t·∫°o trong m√¥i tr∆∞·ªùng k·ªπ thu·∫≠t",
            "Ki·∫øn tr√∫c s∆∞ - K·∫øt h·ª£p th·∫©m m·ªπ v√† k·ªπ thu·∫≠t x√¢y d·ª±ng"
        ],
        "ISTP_S": [
            "Hu·∫•n luy·ªán vi√™n th·ªÉ thao - K·ªπ nƒÉng k·ªπ thu·∫≠t v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi kh√°c",
            "K·ªπ thu·∫≠t vi√™n y t·∫ø - H·ªó tr·ª£ chƒÉm s√≥c s·ª©c kh·ªèe v·ªõi k·ªπ nƒÉng k·ªπ thu·∫≠t",
            "Gi√°o vi√™n k·ªπ thu·∫≠t - Truy·ªÅn ƒë·∫°t ki·∫øn th·ª©c th·ª±c t·∫ø",
            "Nh√¢n vi√™n c·ª©u h·ªô - B√¨nh tƒ©nh x·ª≠ l√Ω t√¨nh hu·ªëng kh·∫©n c·∫•p",
            "Chuy√™n gia ƒë√†o t·∫°o k·ªπ nƒÉng - H∆∞·ªõng d·∫´n th·ª±c h√†nh hi·ªáu qu·∫£"
        ],
        "ISTP_E": [
            "Qu·∫£n l√Ω d·ª± √°n k·ªπ thu·∫≠t - K·∫øt h·ª£p k·ªπ nƒÉng k·ªπ thu·∫≠t v√† qu·∫£n l√Ω",
            "T∆∞ v·∫•n c√¥ng ngh·ªá - Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t gi·∫£i ph√°p",
            "Ch·ªß doanh nghi·ªáp nh·ªè - ƒê·ªôc l·∫≠p v√† th·ª±c t·∫ø trong kinh doanh",
            "Qu·∫£n l√Ω s·∫£n xu·∫•t - T·ªëi ∆∞u h√≥a quy tr√¨nh v√† hi·ªáu su·∫•t",
            "ƒê·∫°i l√Ω b·∫•t ƒë·ªông s·∫£n k·ªπ thu·∫≠t - Hi·ªÉu bi·∫øt v·ªÅ k·ªπ thu·∫≠t x√¢y d·ª±ng"
        ],
        "ISTP_C": [
            "Qu·∫£n l√Ω h·ªá th·ªëng th√¥ng tin - T·ªï ch·ª©c v√† v·∫≠n h√†nh h·ªá th·ªëng",
            "K·ªπ s∆∞ ch·∫•t l∆∞·ª£ng - ƒê·∫£m b·∫£o ti√™u chu·∫©n v√† quy tr√¨nh",
            "Chuy√™n vi√™n ph√¢n t√≠ch t√†i ch√≠nh - X·ª≠ l√Ω d·ªØ li·ªáu ph·ª©c t·∫°p",
            "Qu·∫£n l√Ω h·∫≠u c·∫ßn - T·ªëi ∆∞u chu·ªói cung ·ª©ng",
            "K·ªπ thu·∫≠t vi√™n IT - B·∫£o tr√¨ v√† v·∫≠n h√†nh h·ªá th·ªëng"
        ]
    }
    
    # L·∫•y k√Ω t·ª± ƒë·∫ßu c·ªßa RIASEC code
    riasec_first = riasec[0] if riasec else 'R'
    combination_key = f"{mbti}_{riasec_first}"
    
    # L·∫•y careers ho·∫∑c d√πng default
    careers = career_suggestions.get(combination_key, [
        "Qu·∫£n l√Ω d·ª± √°n - K·ªπ nƒÉng t·ªï ch·ª©c v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ",
        "Ph√°t tri·ªÉn ph·∫ßn m·ªÅm - T∆∞ duy logic v√† s√°ng t·∫°o",
        "T∆∞ v·∫•n k·ªπ thu·∫≠t - Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t gi·∫£i ph√°p",
        "Qu·∫£n l√Ω ch·∫•t l∆∞·ª£ng - ƒê·∫£m b·∫£o ti√™u chu·∫©n v√† hi·ªáu su·∫•t",
        "Nghi√™n c·ª©u v√† ph√°t tri·ªÉn - ·ª®ng d·ª•ng c√¥ng ngh·ªá m·ªõi"
    ])
    
    # Summary d·ª±a tr√™n MBTI v√† RIASEC
    mbti_descriptions = {
        "ISTP": "B·∫°n l√† ng∆∞·ªùi th·ª±c t·∫ø, ƒë·ªôc l·∫≠p, gi·ªèi gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ v√† c√≥ k·ªπ nƒÉng k·ªπ thu·∫≠t t·ªët.",
        "ESTP": "B·∫°n nƒÉng ƒë·ªông, th·ª±c t·∫ø, gi·ªèi ·ª©ng bi·∫øn v√† c√≥ kh·∫£ nƒÉng giao ti·∫øp t·ªët.",
        "ISFJ": "B·∫°n t·∫≠n t√¢m, t·ªâ m·ªâ, ƒë√°ng tin c·∫≠y v√† lu√¥n quan t√¢m ƒë·∫øn ng∆∞·ªùi kh√°c.",
        "ENFP": "B·∫°n s√°ng t·∫°o, nhi·ªát t√¨nh, linh ho·∫°t v√† c√≥ kh·∫£ nƒÉng truy·ªÅn c·∫£m h·ª©ng."
    }
    
    base_summary = mbti_descriptions.get(mbti, "B·∫°n c√≥ t√≠nh c√°ch ƒë·ªôc ƒë√°o v·ªõi nhi·ªÅu ti·ªÅm nƒÉng ph√°t tri·ªÉn.")
    riasec_summary = riasec_descriptions.get(riasec_first, "ph√π h·ª£p v·ªõi m√¥i tr∆∞·ªùng l√†m vi·ªác ƒëa d·∫°ng")
    
    summary = f"{base_summary} V·ªõi xu h∆∞·ªõng {riasec_summary}, b·∫°n s·∫Ω ph√°t huy t·ªët nh·∫•t kh·∫£ nƒÉng c·ªßa m√¨nh trong c√°c lƒ©nh v·ª±c ƒë√≤i h·ªèi s·ª± k·∫øt h·ª£p gi·ªØa t∆∞ duy ph√¢n t√≠ch v√† k·ªπ nƒÉng th·ª±c h√†nh."
    
    return {
        "careers": careers,
        "summary": summary
    }

@app.route("/api/health", methods=["GET"])
def health_check():
    """Endpoint ki·ªÉm tra server ho·∫°t ƒë·ªông"""
    return jsonify({
        "status": "healthy", 
        "message": "Server is running",
        "api_key": "‚úÖ Found" if GEMINI_API_KEY else "‚ùå Missing",
        "model": "gemini-2.0-flash"
    })

@app.route("/api/test-ai", methods=["GET"])
def test_ai():
    """Endpoint test AI connection"""
    try:
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content("Xin ch√†o! H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn: B·∫°n c√≥ ho·∫°t ƒë·ªông kh√¥ng?")
        return jsonify({
            "status": "success",
            "message": "AI is working",
            "response": response.text
        })
    except Exception as e:
        return jsonify({
            "status": "error", 
            "message": str(e)
        }), 500

if __name__ == "__main__":
    print("üöÄ Kh·ªüi ƒë·ªông server career AI v·ªõi Gemini 2.0-flash...")
    print(f"üîë API Key: {'‚úÖ Found' if GEMINI_API_KEY else '‚ùå Missing'}")
    print("üéØ Model: gemini-2.0-flash")
    
    app.run(port=5002, debug=True)